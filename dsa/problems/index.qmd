---
title: "Practice Problems"
order: 1
---

# Practice Problems

A collection of DSA problems with solutions and explanations.

## We will be following on some list of problems from : 
1. [Neetcode 150](https://neetcode.io/practice)
<!-- 2. [CCPD Problems List](https://ccpd.io/problems) -->
2. Some Leetcode Lists : 
    - [Graphs List](https://leetcode.com/problem-list/r3wkcrvh/)
    - [Recursion List](https://leetcode.com/problem-list/pvzikqdr/)
    - [Trees List](https://leetcode.com/problem-list/pvzsm5jg/)
    - Dynamic Programming List
      - [Classic DP](https://leetcode.com/problem-list/9cgl8v8c/)
      - [Linear DP](https://leetcode.com/problem-list/9cglvrfs/)
      - [Knapsack DP](https://leetcode.com/problem-list/9cgll6z7/)
      - [DP on Grids](https://leetcode.com/problem-list/9cgl3ati/)
      - [DP on Digits](https://leetcode.com/problem-list/9cgl69lg/)
      - [DP on Maths](https://leetcode.com/problem-list/9cglt0q2/)
      - [DP on Strings](https://leetcode.com/problem-list/9cgldby3/) 
      - [DP on Trees & Graphs](https://leetcode.com/problem-list/9cgl011m/)
      - [DP on Bit Manipulation](https://leetcode.com/problem-list/9cglui66/)
    - [Binary Search List](https://leetcode.com/problem-list/pvzlmu3g/)
    - [Heaps, Array, String List](https://leetcode.com/problem-list/pvz3oar6/)


## Problem-Solving Tips

::: {.callout-tip}
## Before Starting
1. **Understand the problem**: Read carefully, identify inputs/outputs
2. **Consider examples**: Work through small examples manually
3. **Identify patterns**: Look for common algorithmic patterns
4. **Plan your approach**: Choose appropriate data structures
5. **Consider edge cases**: Empty inputs, single elements, etc.
:::

::: {.callout-warning}
## Common Mistakes
- Not handling edge cases
- Incorrect time/space complexity analysis
- Not optimizing for the specific constraints
- Overcomplicating simple problems
:::

## Practice Resources

### Online Platforms
- **LeetCode**: 2000+ problems with varying difficulty
- **HackerRank**: Good for beginners, company-specific problems
- **Codeforces**: Competitive programming, regular contests
- **AtCoder**: Japanese platform, good for learning

### Problem Categories to Master
1. **Arrays & Strings**: Two pointers, sliding window, prefix sums
2. **Linked Lists**: Fast/slow pointers, reversing, merging
3. **Trees**: DFS/BFS, recursion, tree construction
4. **Graphs**: DFS/BFS, shortest paths, topological sort
5. **Dynamic Programming**: Memoization, tabulation, state transitions
6. **Binary Search**: Finding boundaries, optimization problems 