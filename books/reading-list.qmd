---
title: "Reading List"
order: 2
---

# Reading List

My organized list of technical books, categorized by priority and learning goals.

## Currently Reading

### üìñ **Active Books**

#### "Designing Data-Intensive Applications" by Martin Kleppmann
- **Progress**: 60% (Chapter 5: Replication)
- **Category**: System Design
- **Priority**: High
- **Target Completion**: March 2024
- **Key Topics**: Data models, storage engines, distributed systems
- **Notes**: [Link to detailed notes](/books/notes.qmd#designing-data-intensive-applications)

#### "Cracking the Coding Interview" by Gayle McDowell
- **Progress**: 40% (Arrays & Strings section)
- **Category**: DSA
- **Priority**: High
- **Target Completion**: April 2024
- **Key Topics**: Problem-solving techniques, interview strategies
- **Notes**: [Link to detailed notes](/books/notes.qmd#cracking-the-coding-interview)

## Upcoming Books (Next 3 Months)

### üî• **High Priority**

#### "System Design Interview" by Alex Xu
- **Category**: System Design
- **Priority**: High
- **Planned Start**: March 2024
- **Estimated Duration**: 6 weeks
- **Learning Goals**: Interview preparation, scalable architecture
- **Prerequisites**: Basic system design concepts

#### "Building Microservices" by Sam Newman
- **Category**: Architecture
- **Priority**: High
- **Planned Start**: April 2024
- **Estimated Duration**: 4 weeks
- **Learning Goals**: Microservices patterns, deployment strategies
- **Prerequisites**: Basic distributed systems knowledge

#### "Kubernetes in Action" by Marko Luk≈°a
- **Category**: DevOps
- **Priority**: High
- **Planned Start**: May 2024
- **Estimated Duration**: 8 weeks
- **Learning Goals**: Container orchestration, cloud-native applications
- **Prerequisites**: Docker basics

### üìö **Medium Priority**

#### "Effective Python" by Brett Slatkin
- **Category**: Programming
- **Priority**: Medium
- **Planned Start**: June 2024
- **Estimated Duration**: 4 weeks
- **Learning Goals**: Python best practices, performance optimization
- **Prerequisites**: Intermediate Python knowledge

#### "Database Design for Mere Mortals" by Michael Hernandez
- **Category**: Data
- **Priority**: Medium
- **Planned Start**: July 2024
- **Estimated Duration**: 6 weeks
- **Learning Goals**: Data modeling, normalization, database design
- **Prerequisites**: Basic SQL knowledge

#### "Site Reliability Engineering" by Google
- **Category**: DevOps
- **Priority**: Medium
- **Planned Start**: August 2024
- **Estimated Duration**: 8 weeks
- **Learning Goals**: SRE practices, monitoring, incident response
- **Prerequisites**: Basic infrastructure knowledge

## Long-term Reading Plan (6-12 Months)

### üéØ **Advanced Topics**

#### "Introduction to Algorithms" (CLRS)
- **Category**: DSA
- **Priority**: Medium
- **Planned Start**: September 2024
- **Estimated Duration**: 12 weeks
- **Learning Goals**: Algorithm fundamentals, complexity analysis
- **Prerequisites**: Strong mathematical background

#### "Patterns of Enterprise Application Architecture" by Martin Fowler
- **Category**: Architecture
- **Priority**: Medium
- **Planned Start**: December 2024
- **Estimated Duration**: 10 weeks
- **Learning Goals**: Enterprise patterns, architectural decisions
- **Prerequisites**: Basic design patterns knowledge

#### "The Mythical Man-Month" by Frederick Brooks
- **Category**: Project Management
- **Priority**: Low
- **Planned Start**: February 2025
- **Estimated Duration**: 3 weeks
- **Learning Goals**: Software project management, team dynamics
- **Prerequisites**: None

### üîß **Specialized Topics**

#### "Security Engineering" by Ross Anderson
- **Category**: Security
- **Priority**: Medium
- **Planned Start**: March 2025
- **Estimated Duration**: 8 weeks
- **Learning Goals**: Security principles, threat modeling
- **Prerequisites**: Basic security concepts

#### "Data Mesh" by Zhamak Dehghani
- **Category**: Data Architecture
- **Priority**: Low
- **Planned Start**: May 2025
- **Estimated Duration**: 6 weeks
- **Learning Goals**: Modern data architecture, domain-driven design
- **Prerequisites**: Data engineering basics

## Completed Books

### ‚úÖ **2024 Completed**

#### "Clean Code" by Robert C. Martin
- **Category**: Programming
- **Rating**: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
- **Completion Date**: January 2024
- **Key Takeaways**: Meaningful names, small functions, SOLID principles
- **Impact**: Improved code organization and maintainability

#### "The Pragmatic Programmer" by David Thomas & Andrew Hunt
- **Category**: Programming
- **Rating**: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
- **Completion Date**: February 2024
- **Key Takeaways**: DRY principle, automation, continuous learning
- **Impact**: Enhanced development workflow and tool usage

### ‚úÖ **2023 Completed**

#### "Head First Design Patterns" by Freeman & Robson
- **Category**: Architecture
- **Rating**: ‚≠ê‚≠ê‚≠ê‚≠ê
- **Completion Date**: November 2023
- **Key Takeaways**: Design patterns, object-oriented principles
- **Impact**: Better code structure and reusability

#### "Python Cookbook" by David Beazley & Brian Jones
- **Category**: Programming
- **Rating**: ‚≠ê‚≠ê‚≠ê‚≠ê
- **Completion Date**: October 2023
- **Key Takeaways**: Python idioms, advanced techniques
- **Impact**: More efficient Python code

## Reading Statistics

### üìä **Progress Tracking**

#### 2024 Goals
- **Books Completed**: 2/12 (17%)
- **Pages Read**: 800/3,000 (27%)
- **Notes Written**: 15/50 (30%)
- **Projects Built**: 2/5 (40%)

#### Reading Speed
- **Average Pages/Day**: 15-20 pages
- **Reading Sessions**: 30-60 minutes daily
- **Note-taking Time**: 10-15 minutes per session
- **Implementation Time**: 2-3 hours per week

## Book Selection Criteria

### üéØ **Priority Factors**

#### High Priority
- **Current Project Needs**: Books directly relevant to work
- **Interview Preparation**: Essential for career advancement
- **Skill Gaps**: Areas where I need immediate improvement
- **Industry Trends**: Emerging technologies and practices

#### Medium Priority
- **Career Development**: Long-term skill building
- **Technology Exploration**: New areas of interest
- **Best Practices**: Improving existing knowledge
- **Reference Materials**: Books to consult as needed

#### Low Priority
- **Personal Interest**: Topics I'm curious about
- **Classic Literature**: Timeless books for general knowledge
- **Specialized Topics**: Niche areas for future exploration
- **Recreational Reading**: Less technical, more conceptual

### üìã **Selection Process**

1. **Identify Need**: Current project or skill gap
2. **Research Options**: Read reviews, check recommendations
3. **Evaluate Fit**: Match with learning goals and timeline
4. **Plan Reading**: Schedule and estimate duration
5. **Track Progress**: Monitor completion and understanding

## Reading Environment Setup

### üõ†Ô∏è **Tools & Resources**

#### Digital Reading
- **Kindle**: Primary e-reader for digital books
- **O'Reilly Learning**: Online platform with technical books
- **Safari Books Online**: Additional technical book access
- **PDF Reader**: For books available in PDF format

#### Note-taking
- **Notion**: Primary note-taking and organization
- **Obsidian**: For linked notes and knowledge graphs
- **GitHub**: Code examples and implementations
- **Physical Notebook**: Quick sketches and diagrams

#### Practice & Implementation
- **VS Code**: Code editor for examples
- **GitHub**: Repository for projects and examples
- **Docker**: Container environment for testing
- **Cloud Platforms**: AWS/GCP for infrastructure practice

### üìÖ **Reading Schedule**

#### Daily Routine
- **Morning**: 30-45 minutes before work
- **Lunch**: 15-20 minutes during break
- **Evening**: 30-60 minutes after work
- **Weekend**: 2-3 hours for deep reading

#### Weekly Goals
- **Pages**: 100-150 pages per week
- **Notes**: 5-10 detailed notes
- **Practice**: 1-2 implementation sessions
- **Review**: 30 minutes reviewing previous notes

## Success Metrics

### üìà **Quantitative Goals**

#### 2024 Targets
- **Books Completed**: 12 technical books
- **Pages Read**: 3,000+ pages
- **Notes Written**: 50+ detailed notes
- **Projects Built**: 5+ implementations
- **Concepts Mastered**: 25+ key concepts

#### Monthly Tracking
- **Books Started**: 1-2 new books
- **Books Completed**: 1 book per month
- **Notes Written**: 8-10 notes per month
- **Practice Sessions**: 4-6 implementation sessions

### üéØ **Qualitative Goals**

#### Understanding
- **Deep Comprehension**: Can explain concepts to others
- **Practical Application**: Use knowledge in real projects
- **Critical Thinking**: Evaluate different approaches
- **Problem Solving**: Apply patterns to new situations

#### Skill Development
- **System Design**: Design scalable architectures
- **DSA**: Solve complex algorithmic problems
- **Programming**: Write clean, maintainable code
- **DevOps**: Deploy and manage applications

## Community & Accountability

### üë• **Study Groups**
- **Local Meetups**: Monthly book discussion groups
- **Online Forums**: Reddit r/learnprogramming book clubs
- **Discord Groups**: Technical book study channels
- **Mentorship**: Teaching others while learning

### üìù **Content Creation**
- **Blog Posts**: Monthly book reviews and summaries
- **Code Examples**: GitHub repositories with implementations
- **Video Content**: Explaining concepts to others
- **Presentations**: Sharing learnings with teams

::: {.callout-tip}
## Reading Tips
- **Set Realistic Goals**: Don't overwhelm yourself with too many books
- **Take Regular Breaks**: Avoid burnout with consistent but manageable pace
- **Practice Implementation**: Code examples and build projects
- **Review Regularly**: Revisit notes to reinforce learning
- **Share Knowledge**: Discuss concepts with others
:::

::: {.callout-warning}
## Common Pitfalls
- **Overwhelming**: Trying to read too many books simultaneously
- **Passive Reading**: Not engaging actively with the material
- **No Practice**: Reading without implementation
- **Isolation**: Learning without community discussion
- **Perfectionism**: Getting stuck on one book for too long
::: 